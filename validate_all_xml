#!/usr/bin/python3
import libvirt
import logging
import argparse
import urllib.request
import urllib.parse
import json
from lxml import etree
from io import StringIO
from os import path
import tempfile
# Todo: Format the code

def getRngDir(ver):
    # Todo: schemas dir is doc/schemas before v8.2.0
    # Todo: handle the error
    #   HTTPError: HTTP Error 404: Not Foun
    schemas_path = "src/conf/schemas"
    url = 'https://gitlab.com/api/v4/projects/38286904/repository/tree?path={0}&ref={1}&per_page=50'.format(
        schemas_path, ver)
    rngs = [i["path"] for i in json.load(
        StringIO(urllib.request.urlopen(url).read().decode())) if '.rng' in i["path"]]
    rngs_tmpdir = tempfile.mkdtemp(prefix='rngs-{0}-'.format(ver))
    for i in rngs:
        rng_url = "https://gitlab.com/api/v4/projects/38286904/repository/files/{0}/raw?ref={1}".format(
            urllib.parse.quote_plus(i), ver)
        urllib.request.urlretrieve(
            rng_url, filename=path.join(rngs_tmpdir, path.basename(i)))

    return rngs_tmpdir


def validateXML(xmlstr, rngs_dir):
    xmlroot2rng = {"cpu": "cpu.rng",
                   "domainsnapshot": "domainsnapshot.rng",
                   "domaincheckpoint": "domaincheckpoint.rng",
                   "domainbackup": "domainbackup.rng",
                   "domainCapabilities": "domaincaps.rng",
                   "domain": "domain.rng",
                   "networkport": "networkport.rng",
                   "network": "network.rng",
                   "networkport": "networkport.rng",
                   "storagepoolCapabilities":  "storagepoolcaps.rng",
                   "pool": "storagepool.rng",
                   "volume": "storagevol.rng",
                   "capabilities": "capability.rng",
                   "device": "nodedev.rng",
                   "filterbinding": "nwfilterbinding.rng",
                   "filter": "nwfilter.rng",
                   "secret": "secret.rng",
                   "interface": "interface.rng"}
    xml_root = etree.fromstring(xmlstr)
    with open(path.join(rngs_tmpdir, xmlroot2rng[xml_root.tag])) as f:
        rng_schema = etree.parse(f)

    relaxng = etree.RelaxNG(rng_schema)
    ret = relaxng.validate(xml_root.getroottree())
    if (not ret):
        with tempfile.NamedTemporaryFile('wt', prefix='validate-', suffix='.xml', delete=False) as f:
            f.write(xmlstr)
            f.flush()
        print("------------------------------------------------------------------------------------------------------------------------")
        logging.error("Fail to validate the XML file: {0}\n{1}".format(
            f.name, relaxng.error_log))
    return ret


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Validate all the XMLs of libvirt objects')
    parser.add_argument('-c', type=str, dest='connect', default='qemu:///system',
                        help='The connect uri')
    parser.add_argument('-f', type=str, dest='file', help='The single file to validate')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-t', type=str, dest='tag', default='master',
                        help='The tags of libvirt git repo, like v8.6.0 . If this options is specified, it will use the tag version of RNG files to validate the libvirt XML. For all the tags, see https://gitlab.com/libvirt/libvirt/-/tags')
    group.add_argument('-d', type=str, dest='dir',
                        help='The dir for RNG files to validate the libvirt XMLs')
    args = parser.parse_args()
    conn = libvirt.open(args.connect)
    rngs_tmpdir = args.dir if args.dir else getRngDir(args.tag)
    if (args.file):
        validateXML(open(args.file).read(), rngs_tmpdir)
        exit

    validateXML(conn.getCapabilities(), rngs_tmpdir)
    validateXML(conn.getDomainCapabilities(), rngs_tmpdir)
    validateXML(conn.getStoragePoolCapabilities(), rngs_tmpdir)

    for dom in conn.listAllDomains():
        validateXML(dom.XMLDesc(libvirt.VIR_DOMAIN_XML_SECURE), rngs_tmpdir)

        if (dom.isActive()):
            fmt = {"domain": dom.name()}
            try:
                if (not validateXML(dom.backupGetXMLDesc(), rngs_tmpdir)):
                    logging.error(
                        "Validating BACKUP of DOMAIN {domain} is FAILED\n".format(**fmt))
            except libvirt.libvirtError as err:
                if err.get_error_code() != libvirt.VIR_ERR_NO_DOMAIN_BACKUP:
                    logging.error(
                        "Unexpected libvirt error, err code: {0}".format(err.get_error_code()))
                else:
                    logging.info(
                        "No BACKUP for DOMAIN {domain}".format(**fmt))

        for domsnap in dom.listAllSnapshots():
            validateXML(domsnap.getXMLDesc(libvirt.VIR_DOMAIN_SNAPSHOT_XML_SECURE), rngs_tmpdir)

        for domcp in dom.listAllCheckpoints():
            domcp_xml_flags = libvirt.VIR_DOMAIN_CHECKPOINT_XML_NO_DOMAIN | libvirt.VIR_DOMAIN_CHECKPOINT_XML_SECURE
            if (dom.isActive()):
                domcp_xml_flags |= libvirt.VIR_DOMAIN_CHECKPOINT_XML_SIZE
            validateXML(domcp.getXMLDesc(domcp_xml_flags), rngs_tmpdir)

    for net in conn.listAllNetworks():
        validateXML(net.XMLDesc(), rngs_tmpdir)
        if (net.isActive()):
            for netport in net.listAllPorts():
                validateXML(netport.XMLDesc(), rngs_tmpdir)

    for nwfilter in conn.listAllNWFilters():
        validateXML(nwfilter.XMLDesc(), rngs_tmpdir)

    for nwfilterbinding in conn.listAllNWFilterBindings():
        validateXML(nwfilterbinding.XMLDesc(), rngs_tmpdir)

    for storagepool in conn.listAllStoragePools():
        validateXML(storagepool.XMLDesc(), rngs_tmpdir)

        if (storagepool.isActive()):
            for storagevol in storagepool.listAllVolumes():
                validateXML(storagevol.XMLDesc(), rngs_tmpdir)

    for nodedev in conn.listAllDevices():
        validateXML(nodedev.XMLDesc(), rngs_tmpdir)

    for secret in conn.listAllSecrets():
        validateXML(secret.XMLDesc(), rngs_tmpdir)

    for interface in conn.listAllInterfaces():
        validateXML(interface.XMLDesc(), rngs_tmpdir)
